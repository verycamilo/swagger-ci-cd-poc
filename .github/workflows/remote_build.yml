name: Process New Documentation

on:
  repository_dispatch:
    types: [process_openapi]

jobs:
  process_openapi:
    runs-on: ubuntu-latest    
    steps:      
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.SPECS_REPO_PAT }}
      - name: Store New Documentation
        run: |        
          export SPEC_PATH=specs/${{ github.event.client_payload.service }}/${{ github.event.client_payload.stage }}/${{ github.event.client_payload.version }}
          mkdir -p $SPEC_PATH
          echo "${{ github.event.client_payload.doc }}" | base64 -d > $SPEC_PATH/openapi.yml

      - name: Build Service Index
        run: |
          sudo gem install mustache
          export SPEC_PATH=specs/${{ github.event.client_payload.service }}/${{ github.event.client_payload.stage }}/${{ github.event.client_payload.version }}
          echo $SPEC_PATH
          echo "${{ toJson(github.event.client_payload) }}" > data.json
          cat data.json
          mustache data.json templates/service-index.mustache > $SPEC_PATH/index.html
          echo "Going to create stage index"
          mustache data.json templates/redirect-stage-index.mustache > specs/${{ github.event.client_payload.service }}/${{ github.event.client_payload.stage }}/index.html
          if [[ "${{ github.event.client_payload.stage }}" == 'prod' ]]
          then
            echo "Going to create service index"
            mustache data.json templates/redirect-index.mustache > specs/${{ github.event.client_payload.service }}/index.html
          fi
      - name: Build Document Index
        run: |
          SERVICES_PATHS=$(find specs -mindepth 2 -maxdepth 2 -type d)
          echo "services paths: $SERVICES_PATHS"
          for service_path in $SERVICES_PATHS
          do
            SERVICE=$(basename $service_path)
            FILES=$(find $service_path -type f -name "*.yml"  | sort -d)
            for file in $FILES
            do
              LAST=$file
            done
            export TITLE=$(cat $LAST | yq .info.title)
            export DESCRIPTION=$(cat $LAST | yq .info.description)
            export VERSION=$(cat $LAST | yq .info.version)
            export FILE_PATH=$(dirname $LAST)
            jq -n --arg TITLE "$TITLE" --arg DESCRIPTION "$DESCRIPTION" --arg VERSION "$VERSION" --arg FILE_PATH "$FILE_PATH" '{ title: $TITLE, description: $DESCRIPTION, version: $VERSION, path: $FILE_PATH }'
          done | jq -n -s '{ items: inputs }' > services.json
          mustache services.json templates/main-index.mustache > index.html

      - name: Push Documentation
        run: |
          export SPEC_PATH=specs/${{ github.event.client_payload.service }}
          git config --global user.email "ci_bot@vizio.com"
          git config --global user.name "Vizio CI Bot"
          git add $SPEC_PATH/.
          git commit -am "Version ${{ github.event.client_payload.version }} of ${{ github.event.client_payload.service }} for ${{ github.event.client_payload.stage }} updated"
          git push
